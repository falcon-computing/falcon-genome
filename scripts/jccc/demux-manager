#!/usr/bin/env python
import argparse
import json
from fcs_manager import QueueManager
from subprocess import call

# argument settings
parser = argparse.ArgumentParser(description='Demultiplexing handler')

parser.add_argument('-i', '--log-path', dest='log_path', nargs='?',
                     default='', help='path to logging message')

parser.add_argument('-d', '--root-dir', dest='root_dir', nargs='?',
                     default='./', help='root dir to store the FASTQ files')

parser.add_argument('-n', '--num_agents', dest='num_agents', nargs='?',
                     type=int, default=12, help='num of running agents')

parser.add_argument('--in_queue', dest='in_queue', nargs='?',
                     type=int, default=1029, help='id of the demux queue')

parser.add_argument('--out_queue', dest='out_queue', nargs='?',
                     type=int, default=1030, help='id of the compute queue')

args = parser.parse_args()

class DemuxManager(QueueManager):
  def worker_func(self, msg):
    data = json.loads(msg)
    try:
      self.logger.info('start a new demux task:')
      self.logger.info('run_id: ' + data['run_id'] + ' ' +
                  'run_folder: '+ data['run_folder'])

      fastq_dir = args.root_dir +'/'+ data['run_id']
      ret = call([self.dir + '/demux-agent', 
            data['run_id'],
            data['run_folder'],
            fastq_dir])
  
      # check the return signal 
      if ret == 0:
        self.logger.info('finished demux task '+ data['run_id'])

        # copy sample sheet to dest_dir
        call(['cp', 
              data['run_folder']+'/SampleSheet.csv',
              fastq_dir])

        # post task to compute-manager
        out_msg = json.dumps({'run_id': data['run_id'],
                              'demux_dir': args.root_dir +'/'+ data['run_id']})
        self.qout.send(out_msg)
      else:
        raise ValueError('run failed')
    except:
      self.logger.error('demux task '+ data['run_id'] +' failed')
      self.checkpoint(data['run_id']+'.json', msg)

q = DemuxManager(name = "Demux Manager",
      log_path = args.log_path,
      qin_id = args.in_queue,
      qout_id = args.out_queue,
      num_workers = 2)
q.listen()
