#!/usr/bin/env python
import argparse
import json
from fcs_manager import QueueManager
from subprocess import call

# argument settings
parser = argparse.ArgumentParser(description='Email handler')

parser.add_argument('-i', '--log-path', dest='log_path', nargs='?',
                     default='', help='path to logging message')

parser.add_argument('-d', '--root-dir', dest='root_dir', nargs='?',
                     default='./', help='root dir to store the run folders')

parser.add_argument('--in_queue', dest='in_queue', nargs='?',
                     type=int, default=1027, help='id of the rsync queue')

parser.add_argument('--out_queue', dest='out_queue', nargs='?',
                     type=int, default=1028, help='id of the demux queue')

args = parser.parse_args()

class RsyncManager(QueueManager):

  def worker_func(self, msg):
    data = json.loads(msg)
    self.logger.info('start a new task:')
    self.logger.info('run_id: ' + data['run_id'] + ' ' +
                'run_folder: '+ data['run_folder'])
    ret = call([self.dir + '/rsync-agent', 
          'LVrf' + data['run_id'],
          data['password'],
          args.root_dir +'/'+ data['run_folder']])
  
    # check the return signal, only send out next task if run is successful
    if ret != 0:
      self.logger.error('rsync-agent fails for '+data['run_id'])
      self.checkpoint(data['run_id']+'.json', msg)
      return
  
    # create new message
    dmux_msg = json.dumps({'run_id': data['run_id'], 'run_folder': args.root_dir +'/'+ data['run_folder']},
        sort_keys=True, indent=2, separators=(',', ': '))
  
    # post task to demux-manager
    self.qout.send(dmux_msg)
    self.logger.info('finished task '+ data['run_id'])

q = RsyncManager(name = "Rsync Manager",
      log_path = args.log_path,
      qin_id = args.in_queue,
      qout_id = args.out_queue,
      num_workers = 2)

q.listen()
