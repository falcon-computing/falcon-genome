#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/program_options.hpp>

#include <cmath>
#include <iomanip>
#include <string>

#include "fcs-genome/common.h"
#include "fcs-genome/config.h"
#include "fcs-genome/Executor.h"
#include "fcs-genome/workers.h"

namespace fcsgenome {

int ug_main(int argc, char** argv,
    boost::program_options::options_description &opt_desc) 
{
  namespace po = boost::program_options;

  // Define arguments
  po::variables_map cmd_vm;

  opt_desc.add_options() 
    ("ref,r", po::value<std::string>()->required(), "reference genome path")
    ("input,i", po::value<std::string>()->required(), "input BAM file or dir")
    ("output,o", po::value<std::string>()->required(), "output vcf file (if --skip-concat is set"
                                " the output will be a directory of vcf files)")
    ("intervalList,L", po::value<std::string>()->implicit_value(""), "interval list file")
    ("skip-concat,s", "produce a set of vcf files instead of one")
    ("sample-id", po::value<std::string>()->implicit_value(""), "sample id for log file");

  // Parse arguments
  po::store(po::parse_command_line(argc, argv, opt_desc), cmd_vm);

  if (cmd_vm.count("help")) { 
    throw helpRequest();
  } 

  // check configurations
  check_nprocs_config("ug");
  check_memory_config("ug");

  // Check if required arguments are presented
  bool flag_f             = get_argument<bool>(cmd_vm, "force", "f");
  bool flag_skip_concat   = get_argument<bool>(cmd_vm, "skip-concat", "s");
  std::string ref_path    = get_argument<std::string>(cmd_vm, "ref", "r");
  std::string input_path  = get_argument<std::string>(cmd_vm, "input", "i");
  std::string output_path = get_argument<std::string>(cmd_vm, "output", "o");
  std::string intv_list   = get_argument<std::string>(cmd_vm, "intervalList", "L");
  std::string sample_id   = get_argument<std::string>(cmd_vm, "sample-id");
  std::vector<std::string> extra_opts = 
          get_argument<std::vector<std::string>>(cmd_vm, "extra-options", "O");

  // finalize argument parsing
  po::notify(cmd_vm);

  if (cmd_vm.count("sample-id") && sample_id.empty()) {
    throw pathEmpty("sample-id");
  }

  if (cmd_vm.count("intervalList") || cmd_vm.count("L")) {
    if (intv_list.empty()) throw pathEmpty("intervalList");
  }

  // the output path will be a directory
  std::string temp_dir = conf_temp_dir + "/ug";

  // TODO: deal with the case where 
  // 1. output_path is a dir but should not be deleted
  // 2. output_path is a file
  std::string output_dir;

  if (flag_skip_concat) {
    output_dir = check_output(output_path, flag_f);
  }
  else {
    output_dir = temp_dir;
  }
  std::string temp_gvcf_path = output_dir + "/" + get_basename(output_path);

  create_dir(output_dir);

  std::vector<std::string> output_files(get_config<int>("gatk.ncontigs"));
  std::vector<std::string> intv_paths;
  if (!intv_list.empty()) {
    intv_paths = split_by_nprocs(intv_list, "bed");
  }
  else {
    intv_paths = init_contig_intv(ref_path);
  }

  Executor executor("Unified Genotyper",get_config<int>("gatk.ug.nprocs", "gatk.nprocs"));

  for (int contig = 0; contig < get_config<int>("gatk.ncontigs"); contig++) {

    std::string input_file;
    if (boost::filesystem::is_directory(input_path)) {
      // if input is a directory, automatically go into contig mode
      // TODO: here should validate if the bam files in folder
      //       is generated by fcs-genome with the same num contigs
      input_file = get_contig_fname(input_path, contig);
    }
    else {
      input_file = input_path;
    }
    std::string output_file = get_contig_fname(output_dir, contig, "vcf");

    Worker_ptr worker(new UGWorker(ref_path,
        input_file,
        intv_paths[contig],
        output_file,
        extra_opts,
        flag_f)
    );
    output_files[contig] = output_file;
    executor.addTask(worker, sample_id, contig==0);
  }

  if (!flag_skip_concat) {
    bool flag = true;
    bool flag_a = true;
    bool flag_bgzip = true;
    { // concat gvcfs
      Worker_ptr worker(new VCFConcatWorker(
          output_files, 
          temp_gvcf_path,
          flag_a, 
          flag_bgzip,
          flag)
      );
      executor.addTask(worker, sample_id, true);
    }
    //{ // sort gvcf
    //  Worker_ptr worker(new VCFSortWorker(temp_gvcf_path));
    //  executor.addTask(worker, true);
    //}
    { // bgzip gvcf
      Worker_ptr worker(new ZIPWorker(
          temp_gvcf_path, 
          output_path+".gz",
          flag_f)
      );
      executor.addTask(worker, sample_id, true);
    }
    { // tabix gvcf
      Worker_ptr worker(new TabixWorker(
	  output_path + ".gz")
      );
      executor.addTask(worker, sample_id, true);
    }
  }
  executor.run();

  return 0;
}
} // namespace fcsgenome
