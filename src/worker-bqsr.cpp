#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/program_options.hpp>
#include <cmath>
#include <iomanip>
#include <string>


#include "fcs-genome/common.h"
#include "fcs-genome/config.h"
#include "fcs-genome/Executor.h"
#include "fcs-genome/workers.h"

namespace fcsgenome {

static void baserecalAddWorkers(Executor &executor,
    std::string &ref_path,
    std::vector<std::string> &known_sites,
    std::string &input_path,
    std::string &output_path,
    bool flag_f) 
{
  std::vector<std::string> intv_paths = init_contig_intv(ref_path);
  std::vector<std::string> bqsr_paths(get_config<int>("gatk.ncontigs"));

  // compute bqsr for each contigs
  for (int contig = 0; contig < get_config<int>("gatk.ncontigs"); contig++) {
    // handle input as directory
    std::string input_file;
    if (boost::filesystem::is_directory(input_path)) {
      // if input is a directory, automatically go into contig mode
      // TODO: here should validate if the bam files in folder
      //       is generated by fcs-genome with the same num contigs
      input_file = get_contig_fname(input_path, contig);
    }
    else {
      input_file = input_path;
    }

    // output bqsr filename
    std::stringstream ss;
    ss << output_path << "." << contig;
    bqsr_paths[contig] = ss.str();

    DLOG(INFO) << "Task " << contig << " bqsr: " << bqsr_paths[contig];

    Worker_ptr worker(new BQSRWorker(ref_path, known_sites,
          intv_paths[contig],
          input_file, bqsr_paths[contig], 
          contig, flag_f));

    executor.addTask(worker, contig == 0);
  }
  // gather bqsr for contigs
  Worker_ptr worker(new BQSRGatherWorker(bqsr_paths,
        output_path, flag_f));

  executor.addTask(worker, true);
}

static void removePartialBQSR(std::string bqsr_path) {
  // delete all partial contig bqsr
  for (int contig = 0; contig < get_config<int>("gatk.ncontigs"); contig++) {
    std::stringstream ss;
    ss << bqsr_path << "." << contig;
    remove_path(ss.str());
  }
}

static void prAddWorkers(Executor &executor,
    std::string &ref_path,
    std::string &input_path,
    std::string &bqsr_path,
    std::string &output_path,
    bool flag_f) 
{
  std::vector<std::string> intv_paths = init_contig_intv(ref_path);
  for (int contig = 0; contig < get_config<int>("gatk.ncontigs"); contig++) {
    Worker_ptr worker(new PRWorker(ref_path,
          intv_paths[contig], bqsr_path,
          input_path,
          get_contig_fname(output_path, contig),
          contig, flag_f));

    executor.addTask(worker, contig == 0);
  }
}

int baserecal_main(int argc, char** argv,
    boost::program_options::options_description &opt_desc) 
{
  namespace po = boost::program_options;

  // Define arguments
  po::variables_map cmd_vm;

  opt_desc.add_options() 
    arg_decl_string("ref,r", "reference genome path")
    arg_decl_string("input,i", "input BAM file or dir")
    arg_decl_string("output,o", "output BQSR file")
    ("knownSites,K", po::value<std::vector<std::string> >(),
     "known sites for base recalibration");

  // Parse arguments
  po::store(po::parse_command_line(argc, argv, opt_desc),
      cmd_vm);

  if (cmd_vm.count("help")) { 
    throw helpRequest();
  } 

  // Check if required arguments are presented
  bool flag_f             = get_argument<bool>(cmd_vm, "force");
  std::string ref_path    = get_argument<std::string>(cmd_vm, "ref",
                                get_config<std::string>("ref_genome"));
  std::string input_path  = get_argument<std::string>(cmd_vm, "input");
  std::string output_path = get_argument<std::string>(cmd_vm, "output");

  std::vector<std::string> known_sites = get_argument<
    std::vector<std::string> >(cmd_vm, "knownSites");

  // finalize argument parsing
  po::notify(cmd_vm);

  Executor executor("Base Recalibrator", get_config<int>("gatk.bqsr.nprocs"));

  baserecalAddWorkers(executor, ref_path, known_sites,
      input_path, output_path, flag_f);

  executor.run();

  // delete all partial contig bqsr
  removePartialBQSR(output_path);

  return 0;
}

int pr_main(int argc, char** argv,
    boost::program_options::options_description &opt_desc) 
{
  namespace po = boost::program_options;

  // Define arguments
  po::variables_map cmd_vm;

  opt_desc.add_options() 
    arg_decl_string("ref,r", "reference genome path")
    arg_decl_string("bqsr,b", "input BQSR file")
    arg_decl_string("input,i", "input BAM file or dir")
    arg_decl_string("output,o", "output BAM files");

  // Parse arguments
  po::store(po::parse_command_line(argc, argv, opt_desc),
      cmd_vm);

  if (cmd_vm.count("help")) { 
    throw helpRequest();
  } 

  // Check if required arguments are presented
  bool flag_f             = get_argument<bool>(cmd_vm, "force");
  std::string ref_path    = get_argument<std::string>(cmd_vm, "ref",
                                get_config<std::string>("ref_genome"));
  std::string bqsr_path   = get_argument<std::string>(cmd_vm, "bqsr");
  std::string input_path  = get_argument<std::string>(cmd_vm, "input");
  std::string output_path = get_argument<std::string>(cmd_vm, "output");

  // finalize argument parsing
  po::notify(cmd_vm);

  // the output path will be a directory
  create_dir(output_path);

  Executor executor("Print Reads", get_config<int>("gatk.pr.nprocs"));
  
  prAddWorkers(executor, ref_path, 
      input_path, bqsr_path, output_path, flag_f);
  
  executor.run();
}

int bqsr_main(int argc, char** argv,
    boost::program_options::options_description &opt_desc) 
{
  namespace po = boost::program_options;

  // Define arguments
  po::variables_map cmd_vm;

  opt_desc.add_options() 
    arg_decl_string("ref,r", "reference genome path")
    arg_decl_string("bqsr,b", "output BQSR file (if left blank no file will "
                              "be produced")
    arg_decl_string("input,i", "input BAM file or dir")
    arg_decl_string("output,o", "output directory of BAM files")
    ("knownSites,K", po::value<std::vector<std::string> >(),
     "known sites for base recalibration");

  // Parse arguments
  po::store(
      po::parse_command_line(argc, argv, opt_desc),
      cmd_vm);

  if (cmd_vm.count("help")) { 
    throw helpRequest();
  } 

  // Check if required arguments are presented
  bool flag_f             = get_argument<bool>(cmd_vm, "force");
  std::string ref_path    = get_argument<std::string>(cmd_vm, "ref", 
                                get_config<std::string>("ref_genome"));
  std::string input_path  = get_argument<std::string>(cmd_vm, "input");
  std::string output_path = get_argument<std::string>(cmd_vm, "output");

  std::string temp_dir = conf_temp_dir + "/bqsr";
  create_dir(temp_dir);

  bool delete_bqsr;
  std::string bqsr_path;
  try {
    bqsr_path = get_argument<std::string>(cmd_vm, "bqsr");
  } catch (invalidParam &e) {
    delete_bqsr = true; 
    bqsr_path = temp_dir + "/" +
                get_basename(input_path) + ".grp";
    DLOG(INFO) << "Use default bqsr_path = " << bqsr_path;
  }

  std::vector<std::string> known_sites = get_argument<
    std::vector<std::string> >(cmd_vm, "knownSites");

  // finalize argument parsing
  po::notify(cmd_vm);

  // the output path will be a directory
  create_dir(output_path);

  Executor executor("Base Recalibration", get_config<int>("gatk.bqsr.nprocs"));

  // first, do base recal
  baserecalAddWorkers(executor, ref_path, known_sites,
      input_path, bqsr_path, flag_f);

  prAddWorkers(executor, ref_path, 
      input_path, bqsr_path, output_path, flag_f);
  
  executor.run();

  removePartialBQSR(bqsr_path);

  if (delete_bqsr) {
    remove_path(bqsr_path);
  }

  return 0;
}
} // namespace fcsgenome
