#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/program_options.hpp>

#include <cmath>
#include <iomanip>
#include <string>

#include "fcs-genome/common.h"
#include "fcs-genome/config.h"
#include "fcs-genome/Executor.h"
#include "fcs-genome/workers.h"

namespace fcsgenome {

int ir_main(int argc, char** argv,
    boost::program_options::options_description &opt_desc)
{
  namespace po = boost::program_options;

  // Define arguments
  po::variables_map cmd_vm;

  opt_desc.add_options()
    ("ref,r", po::value<std::string>()->required(), "reference genome path")
    ("input,i", po::value<std::string>()->required(), "input BAM file or dir")
    ("output,o", po::value<std::string>()->required(), "output directory of BAM files")
    ("intervalList,L", po::value<std::string>()->implicit_value(""), "interval list file")
    ("sample-id",po::value<std::string>()->implicit_value(""), "sample tag for log files")
    ("merge-bam,m", "merge Parts BAM files")
    ("known,K", po::value<std::vector<std::string> >(),
     "known indels for realignment");

  // Parse arguments
  po::store(po::parse_command_line(argc, argv, opt_desc),
      cmd_vm);

  if (cmd_vm.count("help")) {
    throw helpRequest();
  }

  // check configurations
  check_nprocs_config("indel");
  check_memory_config("indel");

  // Check if required arguments are presented
  bool flag_f             = get_argument<bool>(cmd_vm, "force", "f");
  std::string ref_path    = get_argument<std::string>(cmd_vm, "ref", "r");
  std::string input_path  = get_argument<std::string>(cmd_vm, "input", "i");
  std::string output_path = get_argument<std::string>(cmd_vm, "output", "o");
  std::string target_path = input_path + ".intervals";
  std::string sample_id   = get_argument<std::string>(cmd_vm, "sample-id");
  bool merge_bam_flag     = get_argument<bool>(cmd_vm, "merge-bam", "m");
  std::string intv_list   = get_argument<std::string>(cmd_vm, "intervalList", "L");
  std::vector<std::string> known_indels = get_argument<std::vector<std::string> >(cmd_vm, "known", "K", std::vector<std::string>());
  std::vector<std::string> extra_opts = get_argument<std::vector<std::string>>(cmd_vm, "extra-options", "O");

  // finalize argument parsing
  po::notify(cmd_vm);

  if (cmd_vm.count("sample-id") && sample_id.empty()) {
    throw pathEmpty("sample-id");
  }

  if (cmd_vm.count("intervalList") || cmd_vm.count("L")) {
    if (intv_list.empty()) throw pathEmpty("intervalList");
  }

  // the output path will be a directory
  output_path = check_output(output_path, flag_f);
  create_dir(output_path);

  Executor executor("Indel Realignment", get_config<int>("gatk.indel.nprocs", "gatk.nprocs"));
  { // realign target creator
    Worker_ptr worker(new RTCWorker(ref_path, 
        known_indels,
        input_path, 
        target_path)
    );
    executor.addTask(worker, sample_id, true);
  }

  std::vector<std::string> intv_paths;
  if (!intv_list.empty()) {
    intv_paths = split_by_nprocs(intv_list, "bed");
  }
  else {
    intv_paths = init_contig_intv(ref_path);
  }

  for (int contig = 0; contig < get_config<int>("gatk.ncontigs"); contig++) {
    std::string input_file;
    if (boost::filesystem::is_directory(input_path)) {
      // if input is a directory, automatically go into contig mode
      // TODO: here should validate if the bam files in folder
      //       is generated by fcs-genome with the same num contigs
      input_file = get_contig_fname(input_path, contig);
    }
    else {
      input_file = input_path;
    }
    Worker_ptr worker(new IndelWorker(ref_path, 
        known_indels,
        intv_paths[contig],
        input_file, 
        target_path,
        get_contig_fname(output_path, contig),
        extra_opts,
        flag_f)
    );
    executor.addTask(worker, sample_id, contig==0);
  }

  if (merge_bam_flag){
    std::string mergeBAM(output_path);
    boost::replace_all(mergeBAM, ".bam", "_merged.bam");
    Worker_ptr merger_worker(new SambambaWorker(output_path, mergeBAM, SambambaWorker::MERGE, ".*/part-[0-9].*.*", flag_f));
    executor.addTask(merger_worker, sample_id, true);   
  }

  executor.run();
  
  // delete all partial contig bqsr
  remove_path(target_path);

  return 0;
}
} // namespace fcsgenome
